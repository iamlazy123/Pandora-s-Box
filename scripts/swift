
SLOG=/sdcard/Android/swift.log
APPLIST=/sdcard/Android/applist.txt
# Log in white and continue (unnecessary)
kmsg() {
	echo -e "[-]$@" >> $SLOG
	echo -e "[-]$@"
}
# $1:content
write_panel()
{
    echo "$1" >> "$SLOG"
}
save_panel()
{
    write_panel "[-]======================================================================
          SWIFT"
    write_panel "[-]======================================================================
         AUTHOR: LALICE"
    write_panel "[-]======================================================================
         VERSION: Pandora"
    write_panel "[-]======================================================================
         Last performed: $(date '+%Y-%m-%d %H:%M:%S')"
    write_panel "[-]======================================================================
         FSCACHE STATUS: $(fscc_status)"
    write_panel "[-]======================================================================
         ADJSHIELD STATUS: $(adjshield_status)"
    write_panel "[-]======================================================================
         AdjShield config file path: adjshield_cfg=$adjshield_cfg"
}
# if applist is empty/missing
if [ ! -e $APPLIST ]; then
 echo "com.garena.game.codm" > $APPLIST
fi
###############################
# PATHs
###############################

ADJSHIELD_REL="$BIN_DIR"
ADJSHIELD_NAME="adjshield"

###############################
# AdjShield tool functions
###############################

adjshield_cfg="/sdcard/Android/panel_adjshield.txt"
adjshield_log="/sdcard/Android/log_adjshield.txt"

# $1:str
adjshield_write_cfg()
{
    echo "$1" >> "$adjshield_cfg"
}

adjshield_create_default_cfg()
{
    true > "$adjshield_cfg"
    adjshield_write_cfg "# AdjShield Config File"
    adjshield_write_cfg "# Prevent given processes from being killed by Android LMK by protecting oom_score_adj"
    adjshield_write_cfg "# List all the package names of your Apps which you want to keep alive."
    adjshield_write_cfg "com.riotgames.league.wildrift"
    adjshield_write_cfg "com.garena.game.codm"
    adjshield_write_cfg "com.mobile.legends"
    adjshield_write_cfg "com.tencent.ig"
}

adjshield_start()
{
    # clear log file
    true > "$adjshield_log"
    # check interval: 120 seconds - Deprecated, use event driven instead
    "$MODPATH/system/bin/adjshield" -o "$adjshield_log" -c "$adjshield_cfg" &
}

adjshield_stop()
{
    killall "$ADJSHIELD_NAME"
}

# return:status
adjshield_status()
{
    local err
    if [ "$(ps -A | grep "$ADJSHIELD_NAME")" != "" ]; then
        echo "[-]======================================================================
         RUNNING.. $adjshield_log for details."
    else
        # "Error: Log file not found"
        err="$(cat "$adjshield_log" | grep Error | head -n 1 | cut -d: -f2)"
        if [ "$err" != "" ]; then
            echo "Not running.$err."
        else
            echo "Not running. Unknown reason."
        fi
    fi
}

#CGROUP functions
change_task_cgroup()
{
    local ps_ret
    ps_ret="$(ps -Ao pid,args)"
    for temp_pid in $(echo "$ps_ret" | grep -i "$1" | awk '{print $1}'); do
        for temp_tid in $(ls "/proc/$temp_pid/task/"); do
            comm="$(cat /proc/$temp_pid/task/$temp_tid/comm)"
            log "change $1/$comm($temp_tid) -> cgroup:$2"
            echo "$temp_tid" > "/dev/$3/$2/tasks"
        done
    done
}

# $1:process_name $2:cgroup_name $3:"cpuset"/"stune"
change_proc_cgroup()
{
    local ps_ret
    ps_ret="$(ps -Ao pid,args)"
    for temp_pid in $(echo "$ps_ret" | grep -i "$1" | awk '{print $1}'); do
        comm="$(cat /proc/$temp_pid/comm)"
        log "change $comm($temp_pid) -> cgroup:$2"
        echo $temp_pid > "/dev/$3/$2/cgroup.procs"
    done
}

# $1:task_name $2:thread_name $3:cgroup_name $4:"cpuset"/"stune"
change_thread_cgroup()
{
    local ps_ret
    ps_ret="$(ps -Ao pid,args)"
    for temp_pid in $(echo "$ps_ret" | grep -i "$1" | awk '{print $1}'); do
        for temp_tid in $(ls "/proc/$temp_pid/task/"); do
            comm="$(cat /proc/$temp_pid/task/$temp_tid/comm)"
            if [ "$(echo $comm | grep -i "$2")" != "" ]; then
                log "change $1/$comm($temp_tid) -> cgroup:$3"
                echo "$temp_tid" > "/dev/$4/$3/tasks"
            fi
        done
    done
}

# $1:task_name $2:hex_mask(0x00000003 is CPU0 and CPU1)
change_task_affinity()
{
    local ps_ret
    ps_ret="$(ps -Ao pid,args)"
    for temp_pid in $(echo "$ps_ret" | grep -i "$1" | awk '{print $1}'); do
        for temp_tid in $(ls "/proc/$temp_pid/task/"); do
            comm="$(cat /proc/$temp_pid/task/$temp_tid/comm)"
            log "change $1/$comm($temp_tid) -> mask:$2"
            taskset -p "$2" "$temp_tid" >> $SLOG
        done
    done
}

# $1:task_name $2:thread_name $3:hex_mask(0x00000003 is CPU0 and CPU1)
change_thread_affinity()
{
    local ps_ret
    local comm
    ps_ret="$(ps -Ao pid,args)"
    for temp_pid in $(echo "$ps_ret" | grep -i "$1" | awk '{print $1}'); do
        for temp_tid in $(ls "/proc/$temp_pid/task/"); do
            comm="$(cat /proc/$temp_pid/task/$temp_tid/comm)"
            if [ "$(echo $comm | grep -i "$2")" != "" ]; then
                log "change $1/$comm($temp_tid) -> mask:$3"
                taskset -p "$3" "$temp_tid" >> $SLOG
            fi
        done
    done
}

# $1:task_name $2:nice(relative to 120)
change_task_nice()
{
    local ps_ret
    ps_ret="$(ps -Ao pid,args)"
    for temp_pid in $(echo "$ps_ret" | grep -i "$1" | awk '{print $1}'); do
        for temp_tid in $(ls "/proc/$temp_pid/task/"); do
            renice "$2" -p "$temp_tid" >> $SLOG
        done
    done
}

# $1:task_name $2:priority(99-x, 1<=x<=99)
change_task_rt()
{
    local ps_ret
    ps_ret="$(ps -Ao pid,args)"
    for temp_pid in $(echo "$ps_ret" | grep -i "$1" | awk '{print $1}'); do
        for temp_tid in $(ls "/proc/$temp_pid/task/"); do
            comm="$(cat /proc/$temp_pid/task/$temp_tid/comm)"
            log "change $1/$comm($temp_tid) -> RT policy"
            chrt -f -p "$2" "$temp_tid" >> $SLOG
        done
    done
}

# $1:task_name $2:thread_name $3:priority(99-x, 1<=x<=99)
change_thread_rt()
{
    local ps_ret
    local comm
    ps_ret="$(ps -Ao pid,args)"
    for temp_pid in $(echo "$ps_ret" | grep -i "$1" | awk '{print $1}'); do
        for temp_tid in $(ls "/proc/$temp_pid/task/"); do
            comm="$(cat /proc/$temp_pid/task/$temp_tid/comm)"
            if [ "$(echo $comm | grep -i "$2")" != "" ]; then
                log "change $1/$comm($temp_tid) -> RT policy"
                chrt -f -p "$3" "$temp_tid" >> $SLOG
            fi
        done
    done
}

# $1:task_name
change_task_high_prio()
{
    local ps_ret
    ps_ret="$(ps -Ao pid,args)"
    for temp_pid in $(echo "$ps_ret" | grep -i "$1" | awk '{print $1}'); do
        for temp_tid in $(ls "/proc/$temp_pid/task/"); do
            # audio thread nice <= -16
            comm="$(cat /proc/$temp_pid/task/$temp_tid/comm)"
            log "change $1/$comm($temp_tid) -> Nice -15"
            renice -n -15 -p "$temp_tid" >> $SLOG
        done
    done
}

# $1:task_name $2:thread_name
change_thread_high_prio()
{
    local ps_ret
    local comm
    ps_ret="$(ps -Ao pid,args)"
    for temp_pid in $(echo "$ps_ret" | grep -i "$1" | awk '{print $1}'); do
        for temp_tid in $(ls "/proc/$temp_pid/task/"); do
            comm="$(cat /proc/$temp_pid/task/$temp_tid/comm)"
            if [ "$(echo $comm | grep -i "$2")" != "" ]; then
                # audio thread nice <= -16
                log "change $1/$comm($temp_tid) -> Nice -15"
                renice -n -15 -p "$temp_tid" >> $SLOG
            fi
        done
    done
}

# $1:task_name $2:thread_name
unpin_thread()
{
    change_thread_cgroup "$1" "$2" "" "cpuset"
}

# $1:task_name $2:thread_name
pin_thread_on_pwr()
{
    change_thread_cgroup "$1" "$2" "background" "cpuset"
}

# $1:task_name $2:thread_name
pin_thread_on_mid()
{
    change_thread_cgroup "$1" "$2" "foreground" "cpuset"
    change_thread_affinity "$1" "$2" "7f"
}

# $1:task_name $2:thread_name
pin_thread_on_perf()
{
    unpin_thread "$1" "$2"
    change_thread_affinity "$1" "$2" "f0"
}

# $1:task_name
unpin_proc()
{
    change_task_cgroup "$1" "" "cpuset"
}

# $1:task_name
pin_proc_on_pwr()
{
    change_task_cgroup "$1" "background" "cpuset"
}

# $1:task_name
pin_proc_on_mid()
{
    change_task_cgroup "$1" "foreground" "cpuset"
    change_task_affinity "$1" "7f"
}

# $1:task_name
pin_proc_on_perf()
{
    unpin_proc "$1"
    change_task_affinity "$1" "f0"
}

rm $LOG

kmsg "=======================================================================
        RUNNING UPERF USERSPACE MODS by (matt yang)...."
#codes from uperf by matt yang
 # Reduce Perf Cluster Wakeup
    # daemons
    pin_proc_on_pwr "crtc_commit"
    pin_proc_on_pwr "crtc_event"
    pin_proc_on_pwr "ueventd"
    pin_proc_on_pwr "netd"
    pin_proc_on_pwr "mdnsd"
    pin_proc_on_pwr "pdnsd"
    pin_proc_on_pwr "analytics"
    pin_proc_on_pwr "daemon"
    change_task_affinity "android\.system\.suspend" "7f"
    # hardware services, eg. android.hardware.sensors@1.0-service
    pin_proc_on_pwr "\.hardware\."
    # pwr cluster has enough capacity for surfaceflinger
    pin_proc_on_pwr "surfaceflinger"
    # MediaProvider is background service
    pin_proc_on_pwr "android\.process\.media"
    # com.miui.securitycenter & com.miui.securityadd
    pin_proc_on_pwr "miui\.security"
    pin_proc_on_mid "com\.android\.providers\.media"

    # system_server blacklist
    pin_proc_on_mid "system_server"
    # input dispatcher
    change_thread_high_prio "system_server" "input"
    # transition animation
    change_thread_rt "system_server" "android\.ui" "1"
    change_thread_rt "system_server" "android\.display" "1"
    # not important
    pin_thread_on_pwr "system_server" "Miui"
    pin_thread_on_pwr "system_server" "Connect"
    pin_thread_on_pwr "system_server" "Network"
    pin_thread_on_pwr "system_server" "Wifi"
    pin_thread_on_pwr "system_server" "Async"
    pin_thread_on_pwr "system_server" "backup"
    pin_thread_on_pwr "system_server" "Greezer"
    pin_thread_on_pwr "system_server" "TaskSnapshot"
    pin_thread_on_pwr "system_server" "Oom"
    pin_thread_on_pwr "system_server" "Sync"
    pin_thread_on_pwr "system_server" "Observer"
    pin_thread_on_pwr "system_server" "Power"
    pin_thread_on_pwr "system_server" "Sensor"
    pin_thread_on_pwr "system_server" "batterystats"
    pin_thread_on_pwr "system_server" "Thread-"
    pin_thread_on_pwr "system_server" "pool-"
    pin_thread_on_pwr "system_server" "Jit thread pool"
    # pin_thread_on_pwr "system_server" "\.bg" # it blocks binders
    # do not let GC thread block system_server
    # pin_thread_on_mid "system_server" "HeapTaskDaemon"
    # pin_thread_on_mid "system_server" "FinalizerDaemon"

    # Render Pipeline
    # speed up searching service binder
    change_task_cgroup "servicemanag" "top-app" "cpuset"
    # prevent display service from being preempted by normal tasks
    change_task_rt "\.hardware\.display" "2"
    change_task_rt "\.composer" "2"
    # vendor.qti.hardware.perf@2.2-service blocks hardware.display.composer-service
    # perf will automatically set self to prio=100
    unpin_proc "\.hardware\.perf"
    # fix laggy bilibili feed scrolling
    change_task_cgroup "android\.phone" "foreground" "cpuset"
    change_thread_cgroup "android\.phone" "Binder" "top-app" "cpuset"
    # sometimes surfaceflinger has quite high load
    change_thread_cgroup "surfaceflinger" "surfaceflinger" "top-app" "cpuset"
    pin_thread_on_mid "surfaceflinger" "app"
    # let UX related Binders run with top-app
    change_thread_cgroup "surfaceflinger" "^Binder" "top-app" "cpuset"
    change_thread_cgroup "system_server" "^Binder" "top-app" "cpuset"
    change_thread_cgroup "system_server" "^Binder" "top-app" "stune"
    change_thread_cgroup "system_server" "^Binder" "top-app" "cpuctl"
    change_thread_cgroup "\.hardware\.display" "^Binder" "top-app" "cpuset"
    change_thread_cgroup "\.composer" "^Binder" "top-app" "cpuset"
    # transition animation
    change_thread_cgroup "system_server" "android\.anim" "top-app" "cpuset"

    # Heavy Scene Boost
    # camera & video recording
    pin_proc_on_mid "\.hardware\.camera"
    pin_proc_on_mid "^camera"
    pin_proc_on_mid "\.hardware\.audio"
    pin_proc_on_mid "^audio"
    # provide best performance for fingerprint service
    pin_proc_on_perf "\.hardware\.biometrics\.fingerprint"
    change_task_high_prio "\.hardware\.biometrics\.fingerprint"
    # mfp-daemon: goodix in-screen fingerprint daemon
    pin_proc_on_perf "mfp-daemon"
    change_task_high_prio "mfp-daemon"
    # boost app boot process, zygote--com.xxxx.xxx
    unpin_proc "zygote"
    change_task_high_prio "zygote"
    # boost android process pool, usap--com.xxxx.xxx
    unpin_proc "usap"
    change_task_high_prio "usap"

    # busybox fork from magiskd
    pin_proc_on_mid "magiskd"
    change_task_nice "magiskd" "10"
    
# pin kworker on little
for f in $(find /sys/devices/virtual/workqueue "cpumask"); do
    echo 0f > $f
done

# End of uperf codes from matt yang
kmsg "=======================================================================
         UPERF USERSPACE MODS by (matt yang) APPLIED...."
         
# changing priority of system services for less aggressive google services and better services management
change_task_nice "system_server" "-6"
change_task_nice "launcher" "-6"
change_task_nice "deletescape" "-6"
change_task_nice "trebuchet" "-6"
change_task_nice "fluid" "-9"
change_task_nice "composer" "-20"
change_task_nice "kswapd0" "1"
change_task_nice "surfaceflinger" "-20"
change_task_nice "servicemanager" "-6"
change_task_nice "msm_irqbalance" "-5"
kmsg "=======================================================================
         SETTING PROCESSES' PRIORITIES..."
         
xargs -rn 1 sh -c "$(typeset -p|grep -vE '(-r)|(-A)'; typeset -f);"' 
change_task_cgroup "$@" "top-app" "cpuset"; 
change_task_cgroup "$@" "foreground" "stune"; 
kmsg "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
         PLACING YOUR APPS TO TOP PRIORITY, PACKAGE NAME: $@"' _ < $APPLIST

# QTI mem opt
###############################
# PATHs
###############################

FSCC_NAME="fscache-ctrl"

###############################
# Abbreviations
###############################

SYS_FRAME="/system/framework"
SYS_LIB="/system/lib64"
VDR_LIB="/vendor/lib64"
DALVIK="/data/dalvik-cache"
APEX1="/apex/com.android.art/javalib"
APEX2="/apex/com.android.runtime/javalib"

###############################
# FSCC tool functions
###############################

fscc_file_list=""

# $1:apk_path $return:oat_path
fscc_path_apk_to_oat()
{
    # OPSystemUI/OPSystemUI.apk -> OPSystemUI/oat
    echo "${1%/*}/oat"
}

# $1:file/dir
fscc_list_append()
{
    fscc_file_list="$fscc_file_list $1"
}

# $1:file/dir
fscc_add_obj()
{
    # whether file or dir exists
    if [ -e "$1" ]; then
        fscc_list_append "$1"
    fi
}

# $1:package_name
fscc_add_apk()
{
    if [ "$1" != "" ]; then
        # pm path -> "package:/system/product/priv-app/OPSystemUI/OPSystemUI.apk"
        fscc_add_obj "$(pm path "$1" | head -n 1 | cut -d: -f2)"
    fi
}

# $1:package_name
fscc_add_dex()
{
    local package_apk_path
    local apk_name

    if [ "$1" != "" ]; then
        # pm path -> "package:/system/product/priv-app/OPSystemUI/OPSystemUI.apk"
        package_apk_path="$(pm path "$1" | head -n 1 | cut -d: -f2)"
        # user app: OPSystemUI/OPSystemUI.apk -> OPSystemUI/oat
        fscc_add_obj "${package_apk_path%/*}/oat"

        # remove apk name suffix
        apk_name="${package_apk_path%/*}"
        # remove path prefix
        apk_name="${apk_name##*/}"
        # system app: get dex & vdex
        # /data/dalvik-cache/arm64/system@product@priv-app@OPSystemUI@OPSystemUI.apk@classes.dex
        for dex in $(find "$DALVIK" | grep "@$apk_name@"); do
            fscc_add_obj "$dex"
        done
   fi
}

fscc_add_app_home()
{
    # well, not working on Android 7.1
    local intent_act="android.intent.action.MAIN"
    local intent_cat="android.intent.category.HOME"
    local pkg_name
    # "  packageName=com.microsoft.launcher"
    pkg_name="$(pm resolve-activity -a "$intent_act" -c "$intent_cat" | grep packageName | head -n 1 | cut -d= -f2)"
    # /data/dalvik-cache/arm64/system@priv-app@OPLauncher2@OPLauncher2.apk@classes.dex 16M/31M  53.2%
    # /data/dalvik-cache/arm64/system@priv-app@OPLauncher2@OPLauncher2.apk@classes.vdex 120K/120K  100%
    # /system/priv-app/OPLauncher2/OPLauncher2.apk 14M/30M  46.1%
    fscc_add_apk "$pkg_name"
    fscc_add_dex "$pkg_name"
}

fscc_add_app_ime()
{
    local pkg_name
    # "      packageName=com.baidu.input_yijia"
    pkg_name="$(ime list | grep packageName | head -n 1 | cut -d= -f2)"
    # /data/dalvik-cache/arm/system@app@baidushurufa@baidushurufa.apk@classes.dex 5M/17M  33.1%
    # /data/dalvik-cache/arm/system@app@baidushurufa@baidushurufa.apk@classes.vdex 2M/7M  28.1%
    # /system/app/baidushurufa/baidushurufa.apk 1M/28M  5.71%
    # pin apk file in memory is not valuable
    fscc_add_dex "$pkg_name"
}

# $1:package_name
fscc_add_apex_lib()
{
    fscc_add_obj "$(find /apex -name "$1" | head -n 1)"
}

# after appending fscc_file_list
fscc_start()
{
    # multiple parameters, cannot be warped by ""
    "$MODPATH/system/bin/fscache-ctrl" -fdlb0 $fscc_file_list
}

fscc_stop()
{
    killall "$FSCC_NAME"
}

# return:status
fscc_status()
{
    # get the correct value after waiting for fscc loading files
    sleep 15
    if [ "$(ps -A | grep "$FSCC_NAME")" != "" ]; then
        echo "[-]======================================================================
         RUNNING.. $(cat /proc/meminfo | grep Mlocked | cut -d: -f2 | tr -d ' ') IN CACHE."
    else
        echo "Not running."
    fi
}

kmsg "=======================================================================
       STARTING FSCACHE...."
       
# similiar to PinnerService, Mlock(Unevictable) 200~350MB
fscc_add_obj "$SYS_FRAME/framework.jar"
fscc_add_obj "$SYS_FRAME/services.jar"
fscc_add_obj "$SYS_FRAME/ext.jar"
fscc_add_obj "$SYS_FRAME/telephony-common.jar"
fscc_add_obj "$SYS_FRAME/qcnvitems.jar"
fscc_add_obj "$SYS_FRAME/oat"
fscc_add_obj "$SYS_FRAME/arm64"
fscc_add_obj "$SYS_FRAME/arm/boot-framework.oat"
fscc_add_obj "$SYS_FRAME/arm/boot-framework.vdex"
fscc_add_obj "$SYS_FRAME/arm/boot.oat"
fscc_add_obj "$SYS_FRAME/arm/boot.vdex"
fscc_add_obj "$SYS_FRAME/arm/boot-core-libart.oat"
fscc_add_obj "$SYS_FRAME/arm/boot-core-libart.vdex"
fscc_add_obj "$SYS_LIB/libandroid_servers.so"
fscc_add_obj "$SYS_LIB/libandroid_runtime.so"
fscc_add_obj "$SYS_LIB/libandroidfw.so"
fscc_add_obj "$SYS_LIB/libandroid.so"
fscc_add_obj "$SYS_LIB/libhwui.so"
fscc_add_obj "$SYS_LIB/libjpeg.so"
fscc_add_obj "$VDR_LIB/libssc.so"
fscc_add_obj "$VDR_LIB/libgsl.so"
fscc_add_obj "$VDR_LIB/sensors.ssc.so"
fscc_add_apex_lib "core-oj.jar"
fscc_add_apex_lib "core-libart.jar"
fscc_add_apex_lib "updatable-media.jar"
fscc_add_apex_lib "okhttp.jar"
fscc_add_apex_lib "bouncycastle.jar"

fscc_stop
fscc_start
fscc_status

kmsg "=======================================================================
       FSCACHE OPTIMIZED AND RUNNING"
# start adjshield
[ ! -f "$adjshield_cfg" ] && adjshield_create_default_cfg
adjshield_stop
adjshield_start

# save mode for automatic applying mode after reboot
save_panel
