#!/system/bin/sh
#------------------------------------===#
#VARIABLES------------------------------=#
LOG=/sdcard/Android/lazy.log
LPM="/sys/module/lpm_levels/parameters"
LMK="/sys/module/lowmemorykiller/parameters"
ST_TOP="/dev/stune/top-app"
ST_FORE="/dev/stune/foreground"
ST_BACK="/dev/stune/background"
ST_RT="/dev/stune/rt"
ST_GLOBAL="/dev/stune/"
CSET="/dev/cpuset"
VM="/proc/sys/vm"
FS="/proc/sys/fs"
NET="/proc/sys/net"
KERNEL="/proc/sys/kernel"
DBG="/sys/kernel/debug"
#------------------------------------===#
#------------------------------------===#
setprop lazy.support 1
###############################
rm $LOG

# Log in white and continue (unnecessary)
kmsg() {
	echo -e "[-] $@" >> $LOG
	echo -e "[-] $@"
}

ctl() {
	# Bail out if file does not exist
	[[ ! -f "$1" ]] && return 1

	# Fetch the current key value
	local curval=`cat "$1" 2> /dev/null`
	
	# Bail out if value is already set
	[[ "$curval" == "$2" ]] && return 1
	
	# Make file writable in case it is not already
	chmod 777 "$1" 2> /dev/null

	# Write the new value and bail if there's an error
	if ! echo "$2" > "$1" 2> /dev/null
	then
		return 1
	fi

	# Log the success
	kmsg "$1 $curval -> $2"
}
toast() {
 am start -a android.intent.action.MAIN -e toasttext "$cmode" -n bellavita.toast/.MainActivity
}	
set_sched_migrate()
{
    ctl $KERNEL/sched_downmigrate "$2"
    ctl $KERNEL/sched_upmigrate "$1"
    ctl $KERNEL/sched_downmigrate "$2"
    ctl $KERNEL/sched_group_downmigrate "$4"
    ctl $KERNEL/sched_group_upmigrate "$3"
    ctl $KERNEL/sched_group_downmigrate "$4"
}
# Check for root permissions and bail if not granted
if [[ "$(id -u)" -ne 0 ]]
then
	kmsg "No root permissions. Exiting."
	exit 1
fi
kmsg "-------------------------------------------------------------------------------------------------------------
		       LAZY IS STARTING
-------------------------------------------------------------------------------------------------------------------"
# Log the date and time for records sake
kmsg "TIME OF EXECUTION: $(date)"
kmsg "KERNEL: `uname -a` "
kmsg "-------------------------------------------------------------------------------------------------------------
           STARTING KERNEL TWEAKS
-------------------------------------------------------------------------------------------------------------------"
# Sync to data in the rare case a device crashes
sync

# Scheduler features 
if [[ -f "$DBG/sched_features" ]]
then
	ctl $DBG/sched_features TTWU_QUEUE
	ctl $DBG/sched_features NEXT_BUDDY
	ctl $DBG/sched_features NO_GENTLE_FAIR_SLEEPERS
	ctl $DBG/sched_features NO_LB_BIAS
	ctl $DBG/sched_features NO_EAS_PREFER_IDLE
	ctl $DBG/sched_features NO_FIND_BEST_TARGET
	ctl $DBG/sched_features NO_NONTASK_CAPACITY
	ctl $DBG/sched_features NO_EAS_USE_NEED_IDLE
	ctl $DBG/sched_features NO_RT_RUNTIME_SHARE
	ctl $DBG/sched_features NO_SCHEDTUNE_BOOST_UTIL
fi

# static kernel parameters
ctl $KERNEL/sched_schedstats 0
ctl $KERNEL/sched_nr_migrate 8
ctl $KERNEL/sched_tunable_scaling 0
ctl $KERNEL/sched_rr_timeslice_ms 1
ctl $KERNEL/sched_migration_cost_ns 30000000

RAM=$(free -m | awk '/Mem:/{print $2}')
# VM
ctl $VM/oom_kill_allocating_task 1
ctl $VM/block_dump 0
ctl $VM/panic_on_oom 0
ctl $VM/reap_mem_on_sigkill 1
ctl $VM/oom_dump_tasks 0
ctl $VM/stat_interval 120
ctl $VM/extfrag_threshold 750
ctl $VM/page-cluster 0
ctl $FS/lease-break-time 10
ctl $FS/leases-enable 1
ctl $FS/dir-notify-enable 0

parameter_adj=$LMK/adj
if [ -e $parameter_adj ]; then
  ctl $parameter_adj "0,58,250,550,850,1000"
fi

parameter_oom_reaper=$LMK/oom_reaper
if [ -e $parameter_oom_reaper ]; then
  ctl $parameter_oom_reaper 1
fi

parameter_lmk_fast_run=$LMK/lmk_fast_run
if [ -e $parameter_lmk_fast_run ]; then
  ctl $parameter_lmk_fast_run 0
fi

front=$((($RAM*2/100)*1024/4))
visible=$((($RAM*3/100)*1024/4))
Second=$((($RAM*5/100)*1024/4))
Hidden=$((($RAM*6/100)*1024/4))
content=$((($RAM*7/100)*1024/4))
empty=$((($RAM*10/100)*1024/4))
	
ctl $LMK/minfree "$front,$visible,$Second,$Hidden,$content,$empty"
kmsg "-------------------------------------------------------------------------------------------------------------
        MEMORY OPTIMIZATIONS APPLIED
-------------------------------------------------------------------------------------------------------------------"
ctl /sys/kernel/rcu_expedited 0
ctl /sys/kernel/rcu_normal 1
ctl /proc/sys/dev/tty/ldisc_autoload 0
ctl /proc/sys/net/core/netdev_tstamp_prequeue 0
ctl /sys/module/msm_performance/parameters/touchboost 1
#based on mvk's principle for cpu_input boosting
ctl /sys/module/cpu_input_boost/parameters/input_boost_freq_hp 1324000
ctl /sys/module/cpu_input_boost/parameters/input_boost_duration 80
ctl /sys/module/cpu_input_boost/parameters/input_boost_freq_lp 1324000
ctl /sys/module/cpu_boost/parameters/input_boost_freq "0:1400000 1:0 2:0 3:0 4:0 5:0 6:0 7:0"
ctl /sys/module/cpu_boost/parameters/input_boost_ms 58
ctl /sys/kernel/fast_charge/force_fast_charge 1

	#based from zenith kernel's core control
	for corectl in /sys/devices/system/cpu/cpu*/core_ctl/
	do
	ctl ${corectl}busy_down_thres "0 0 0 0"
	ctl ${corectl}busy_up_thres "0 0 0 0"
	ctl ${corectl}min_cpus 1
	ctl ${corectl}task_thres 4294967295
	done

sysctl -w kernel.sched_util_clamp_min_rt_default=96
sysctl -w kernel.sched_util_clamp_min=128

#top-app
ctl /dev/cpuset/top-app/uclamp.max max
ctl /dev/cpuset/top-app/uclamp.min 10
ctl /dev/cpuset/top-app/uclamp.boosted 1
ctl /dev/cpuset/top-app/uclamp.latency_sensitive 1

#foreground
ctl /dev/cpuset/foreground/uclamp.max 50
ctl /dev/cpuset/foreground/uclamp.min 0
ctl /dev/cpuset/foreground/uclamp.boosted 0
ctl /dev/cpuset/foreground/uclamp.latency_sensitive 0

#background
ctl /dev/cpuset/background/uclamp.max max
ctl /dev/cpuset/background/uclamp.min 20
ctl /dev/cpuset/background/uclamp.boosted 0
ctl /dev/cpuset/background/uclamp.latency_sensitive 0

#system-background
ctl /dev/cpuset/system-background/uclamp.max 40
ctl /dev/cpuset/system-background/uclamp.min 0
ctl /dev/cpuset/system-background/uclamp.boosted 0
ctl /dev/cpuset/system-background/uclamp.latency_sensitive 0

set_sched_migrate "50" "25" "999" "888"
set_sched_migrate "50 90" "25 50" "999" "888"

kmsg "-------------------------------------------------------------------------------------------------------------
        CPU OPTIMIZED
-------------------------------------------------------------------------------------------------------------------"
	
	for queue in /sys/block/*/queue/
	do
	ctl "${queue}iostats" 0
	ctl "${queue}add_random" 0
	ctl "${queue}rotational" 0
	ctl "${queue}nr_requests" 32
	ctl "${queue}read_ahead_kb" 64
	done

kmsg "-------------------------------------------------------------------------------------------------------------
         I/O OPTIMIZATIONS APPLIED
-------------------------------------------------------------------------------------------------------------------"
for i in $(find /sys/ -name debug_mask); do
 ctl $i 0;
done
for i in $(find /sys/ -name debug_level); do
 ctl $i 0;
done
for i in $(find /sys/ -name edac_mc_log_ce); do
 ctl $i 0;
done
for i in $(find /sys/ -name edac_mc_log_ue); do
 ctl $i 0;
done
for i in $(find /sys/ -name enable_event_log); do
 ctl $i 0;
done
for i in $(find /sys/ -name log_ecn_error); do
 ctl $i 0;
done
for i in $(find /sys/ -name snapshot_crashdumper); do
 ctl $i 0;
done
kmsg "-------------------------------------------------------------------------------------------------------------
         DISABLED GPU DEBUGGING
-------------------------------------------------------------------------------------------------------------------"
kmsg "-------------------------------------------------------------------------------------------------------------
         OVERRIDING KERNEL PARAMETERS --
-------------------------------------------------------------------------------------------------------------------"

# Kernel
if [ -d $KERNEL ]; then
ctl $KERNEL/perf_cpu_time_max_percent 15
ctl $KERNEL/sched_min_task_util_for_boost_colocation 0
ctl $KERNEL/sched_autogroup_enabled 0
ctl $KERNEL/sched_child_runs_first 1
ctl $KERNEL/sched_latency_ns 1000000
ctl $KERNEL/sched_min_granularity_ns 100000
ctl $KERNEL/sched_wakeup_granularity_ns 500000
ctl $KERNEL/sched_rt_runtime_us -1
ctl $KERNEL/sched_initial_task_util 0
fi
	for queue in /sys/block/*/queue/
	do
	# hybrid schedulers priority
	avail_scheds=`cat "${queue}scheduler"`
	for sched in bfq-sq anxiety maple zen cfq bfq-mq none
	do
		if [[ "$avail_scheds" == *"$sched"* ]]
		then
			ctl "${queue}scheduler" "$sched"
			break
		fi
	done
	ctl "${queue}iosched/slice_idle" 0
	ctl "${queue}iosched/low_latency" 1
	ctl "${queue}iosched/group_idle" 0
	ctl "${queue}iosched/back_seek_penalty" 1
	ctl "${queue}iosched/slice_async_rq" 1
	ctl "${queue}iosched/back_seek_max" 214748364
	done
	
#GPU Tunables     	
ctl /sys/class/kgsl/kgsl-3d0/idle_timer 64
ctl /sys/class/kgsl/kgsl-3d0/devfreq/adrenoboost 1
ctl /sys/class/kgsl/kgsl-3d0/throttling 0

if [ -e "/sys/module/adreno_idler" ]; then
	ctl /sys/module/adreno_idler/parameters/adreno_idler_active "N"
fi
	
# Loop over each CPU in the system
for cpu in /sys/devices/system/cpu/cpu*/cpufreq
do
	# Fetch the available governors from the CPU
	avail_govs="$(cat "$cpu/scaling_available_governors")"

	# Attempt to set the governor in this order
	for governor in blu_schedutil schedutil_pixel alucardsched schedutil interactive
	do
		# Once a matching governor is found, set it and break for this CPU
		if [[ "$avail_govs" == *"$governor"* ]]
		then
			ctl "$cpu/scaling_governor" "$governor"
			break
		fi
	done
		ctl /sys/devices/system/cpu/cpufreq/policy0/governor/up_rate_limit_us 2500
		ctl /sys/devices/system/cpu/cpufreq/policy0/governor/down_rate_limit_us 3000
		ctl /sys/devices/system/cpu/cpufreq/policy4/governor/up_rate_limit_us 2500
		ctl /sys/devices/system/cpu/cpufreq/policy4/governor/down_rate_limit_us 3000
		ctl /sys/devices/system/cpu/cpufreq/policy6/governor/up_rate_limit_us 2500
		ctl /sys/devices/system/cpu/cpufreq/policy6/governor/down_rate_limit_us 3000
		ctl "${CPU}schedutil/rate_limit_us" 2500
		ctl "${CPU}schedutil/hispeed_load" 90
		ctl "${CPU}schedutil/hispeed_freq" 0
		ctl "${CPU}schedutil/pl" 1
		ctl "${CPU}schedutil/iowait_boost_enable" 1
done
	
	ctl $VM/vfs_cache_pressure 100
	ctl $VM/dirty_background_ratio 10
	ctl $VM/dirty_ratio 20
	ctl $VM/dirty_expire_centisecs 3000
	ctl $VM/dirty_writeback_centisecs 3000
	
	#TOP-APP
	ctl $ST_TOP/schedtune.boost 0
	ctl $ST_FORE/schedtune.prefer_idle 1
	ctl $ST_TOP/schedtune.prefer_idle 1
	
	kmsg "-------------------------------------------------------------------------------------------------------------
        $(date): KERNEL PARAMETERS OVERRIDEN --
-------------------------------------------------------------------------------------------------------------------"
	# Sucess Message
	cmode="LAZY HAS EXECUTED TASK SUCCESSFULLY. ENJOY!"
	toast
	kmsg "LAZY HAS EXECUTED TASK SUCCESSFULLY. ENJOY!"
exit 0
