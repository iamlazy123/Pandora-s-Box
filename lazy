#!/system/bin/sh
#=======================================#
#VARIABLES===============================#
LOG=/sdcard/Android/lazy.log
LPM="/sys/module/lpm_levels/parameters"
LMK="/sys/module/lowmemorykiller/parameters"
ST_TOP="/dev/stune/top-app"
ST_FORE="/dev/stune/foreground"
ST_BACK="/dev/stune/background"
ST_RT="/dev/stune/rt"
ST_GLOBAL="/dev/stune/"
CSET="/dev/cpuset"
VM="/proc/sys/vm"
NET="/proc/sys/net"
FS="/proc/sys/fs"
KERNEL="/proc/sys/kernel"
DBG="/sys/kernel/debug"
BOOST="sys/module/cpu_boost/parameters"
RAM=$(free -m | awk '/RAM:/{print $2}')
MODE=$(cat /sdcard/mode.txt)
CPUS=`grep -c processor /proc/cpuinfo`
#=======================================#
#=======================================#

###############################
rm $LOG

# Log in white and continue (unnecessary)
kmsg() {
	echo -e "[i] $@" >> $LOG
	echo -e "[i] $@"
}

ctl() {
	# Bail out if file does not exist
	[[ ! -f "$1" ]] && return 1

	# Fetch the current key value
	local curval=`cat "$1" 2> /dev/null`
	
	# Make file writable in case it is not already
	chmod +w "$1" 2> /dev/null

	# Write the new value and bail if there's an error
	if ! echo "$2" > "$1" 2> /dev/null
	then
		kmsg "Failed: $1 → $2"
		return 1
	fi

	# Log the success
	kmsg "$1 $curval → $2"
}

vibrate_cmode() {
if [ -e /sys/class/leds/vibrator/duration ] &&  [ -e /sys/class/leds/vibrator/activate ];then
	echo 400 > /sys/class/leds/vibrator/duration && echo 1 > /sys/class/leds/vibrator/activate
fi
}

# Check for root permissions and bail if not granted
if [[ "$(id -u)" -ne 0 ]]
then
	kmsg "No root permissions. Exiting."
	exit 1
fi

# Log the date and time for records sake
kmsg "Time of execution: $(date)"

# Sync to data in the rare case a device crashes
sync

# Kernel
ctl $KERNEL/perf_cpu_time_max_percent 5
ctl $KERNEL/perf_event_max_sample_rate 10000
ctl $KERNEL/perf_event_mlock_kb 580
ctl $KERNEL/sched_migration_cost_ns 5000000
ctl $KERNEL/sched_autogroup_enabled 0
ctl $KERNEL/sched_child_runs_first 0
ctl $KERNEL/sched_tunable_scaling 0
ctl $KERNEL/sched_schedstats 0
ctl $KERNEL/sched_min_task_util_for_boost_colocation 0
ctl $KERNEL/sched_initial_task_util 0
ctl $KERNEL/sched_nr_migrate 8
ctl $KERNEL/sched_rr_timeslice_ms 90
ctl $KERNEL/printk_devkmsg off
ctl $KERNEL/printk_ratelimit 900
ctl $KERNEL/printk_ratelimit_burst 5

# Scheduler features
if [[ -f "$DBG/sched_features" ]]
then
	ctl $DBG/sched_features NEXT_BUDDY
	ctl $DBG/sched_features TTWU_QUEUE
	ctl $DBG/sched_features NO_GENTLE_FAIR_SLEEPERS
	ctl $DBG/sched_features NO_WAKEUP_PREEMPTION
	ctl $DBG/sched_features NO_HRTICK
	ctl $DBG/sched_features NO_DOUBLE_TICK
fi

# Disable compat logging
ctl $KERNEL/compat-log 0

# Balanced CPUSET for efficiency
ctl $CSET/foreground/cpus "0-6"
ctl $CSET/background/cpus "0-1"
ctl $CSET/restricted/cpus "0-1"

RAM=$(free -m | awk '/Mem:/{print $2}')

# Disable panic on OOM situations.
ctl $VM/panic_on_oom 0

# File grace Period
ctl $FS/lease-break-time 20

#vm
ctl $VM/dirtytime_expire_seconds 44000
ctl $VM/oom_kill_allocating_task 0
ctl $VM/block_dump 0
ctl $VM/page-cluster 0
ctl $VM/overcommit_memory 1
ctl $VM/compact_unevictable_allowed 1
ctl $VM/reap_mem_on_sigkill 1
ctl $VM/oom_dump_tasks 0
ctl $VM/stat_interval 750
ctl $VM/swappiness 100
ctl $FS/dir-notify-enable 0
ctl $FS/leases-enable 1
ctl /proc/irq/default_smp_affinity 01

# EXT4 TUNABLES
ext4="/sys/fs/ext4/*"
	for ext4b in $ext4
	do
			 # increase number of inode table blocks that ext4's inode table readahead algorithm will pre-read into the buffer cache
             ctl ${ext4b}/inode_readahead_blks 64
			 ctl $ext4b/mb_group_prealloc 768
 done
 
# Disables snapshot crashdumper 
ctl /sys/class/kgsl/kgsl-3d0/snapshot/snapshot_crashdumper 0

# Same as reap_mem_on_sigkill 
ctl $LMK/oom_reaper 1

# Extra free memory set by system
ctl $VM/extra_free_kbytes $(($RAM * 4))

# Minimum Free memory in kbytes set by system
ctl $VM/min_free_kbytes $(($RAM * 3))

# Adj
ctl $LMK/adj "0,115,255,557,850,1000"
ctl "$LMK/enable_lmk" "0"
ctl "$LMK/enable_adaptive_lmk" "0"

for queue in /sys/block/*/queue/
do
	ctl "${queue}rotational" 1
	ctl "${queue}rq_affinity" 2
	ctl "${queue}nomerges" 0
done

for i in /sys/block/*/queue/iosched
do
  ctl "${i}/back_seek_max" 4294967295
  ctl "${i}/back_seek_penalty" 1
  ctl "${i}/group_idle" 1
  ctl "${i}/low_latency" 1
  ctl "${i}/slice_idle" 0
  ctl "${i}/slice_idle_us" 0
  ctl "${i}/fifo_expire_async" 330
  ctl "${i}/fifo_expire_sync" 80
done

# Cgroup functions
# $1:task_name $2:cgroup_name $3:"cpuset"/"stune"
change_task_cgroup()
{
# avoid matching grep itself
# ps -Ao pid,args | grep kswapd
# 150 [kswapd0]
# 16490 grep kswapd
local ps_ret
ps_ret="$(ps -Ao pid,args)"
for temp_pid in $(echo "$ps_ret" | grep "$1" | awk '{print $1}'); do
for temp_tid in $(ls "/proc/$temp_pid/task/"); do
echo "$temp_tid" > "/dev/$3/$2/tasks"
done
done
}

# $1:task_name $2:nice(relative to 120)
change_task_nice()
{
# avoid matching grep itself
# ps -Ao pid,args | grep kswapd
# 150 [kswapd0]
# 16490 grep kswapd
local ps_ret
ps_ret="$(ps -Ao pid,args)"
for temp_pid in $(echo "$ps_ret" | grep "$1" | awk '{print $1}'); do
for temp_tid in $(ls "/proc/$temp_pid/task/"); do
renice -n "$2" -p "$temp_tid"
done
done
}

# $1:task_name $2:thread_name $3:cgroup_name $4:"cpuset"/"stune"
change_thread_cgroup()
{
    # avoid matching grep itself
    # ps -Ao pid,args | grep kswapd
    # 150 [kswapd0]
    # 16490 grep kswapd
    local ps_ret
    ps_ret="$(ps -Ao pid,args)"
    for temp_pid in $(echo "$ps_ret" | grep "$1" | awk '{print $1}'); do
        for temp_tid in $(ls "/proc/$temp_pid/task/"); do
            if [ "$(grep "$2" /proc/$temp_pid/task/$temp_tid/comm)" != "" ]; then
                echo "$temp_tid" > "/dev/$4/$3/tasks"
            fi
        done
    done
}

# $1:task_name $2:hex_mask(0x00000003 is CPU0 and CPU1)
change_task_affinity()
{
# avoid matching grep itself
# ps -Ao pid,args | grep kswapd
# 150 [kswapd0]
# 16490 grep kswapd
local ps_ret
ps_ret="$(ps -Ao pid,args)"
for temp_pid in $(echo "$ps_ret" | grep "$1" | awk '{print $1}'); do
for temp_tid in $(ls "/proc/$temp_pid/task/"); do
taskset -p "$2" "$temp_tid"
done
done
}


# $1:process_name $2:cgroup_name $3:"cpuset"/"stune"
change_proc_cgroup()
{
    # avoid matching grep itself
    # ps -Ao pid,args | grep kswapd
    # 150 [kswapd0]
    # 16490 grep kswapd
    local ps_ret
    ps_ret="$(ps -Ao pid,args)"
    for temp_pid in $(echo "$ps_ret" | grep "$1" | awk '{print $1}'); do
        echo $temp_pid > "/dev/$3/$2/cgroup.procs"
    done
}

# $1:task_name $2:thread_name $3:cgroup_name $4:"cpuset"/"stune"
change_thread_cgroup()
{
    # avoid matching grep itself
    # ps -Ao pid,args | grep kswapd
    # 150 [kswapd0]
    # 16490 grep kswapd
    local ps_ret
    ps_ret="$(ps -Ao pid,args)"
    for temp_pid in $(echo "$ps_ret" | grep "$1" | awk '{print $1}'); do
        for temp_tid in $(ls "/proc/$temp_pid/task/"); do
            if [ "$(grep "$2" /proc/$temp_pid/task/$temp_tid/comm)" != "" ]; then
                echo "$temp_tid" > "/dev/$4/$3/tasks"
            fi
        done
    done
}

# cgroup
change_proc_cgroup "system_server" "top-app" "cpuset"
change_proc_cgroup "system_server" "foreground" "stune"

# reduce big cluster wakeup, eg. android.hardware.sensors@1.0-service
change_task_affinity "surfaceflinger" "ff"
change_task_affinity "servicemanager" "ff"
change_task_affinity "system_server" "ff"

# Changing the cgroup of the following PIDs for smoother experience
change_task_cgroup "servicemanager" "top-app" "cpuset"
change_task_cgroup "servicemanager" "foreground" "stune"
change_task_cgroup "android.phone" "top-app" "cpuset"
change_task_cgroup "android.phone" "foreground" "stune"
change_task_cgroup "surfaceflinger" "top-app" "cpuset"
change_task_cgroup "surfaceflinger" "foreground" "stune"

# treat crtc_commit as background, avoid display preemption on big
change_task_cgroup "crtc_commit" "system-background" "cpuset"

# and pin HeapTaskDaemon on LITTLE
change_thread_cgroup "system_server" "HeapTaskDaemon" "background" "cpuset"

# changing priority of system services for less aggressive google services and better services management
change_task_nice "system_server" "-6"
change_task_nice "launcher" "-6"
change_task_nice "trebuchet" "-6"
change_task_nice "inputmethod" "-3"
change_task_nice "fluid" "-9"
change_task_nice "composer" "-20"
change_task_nice "com.android.phone" "-3"
change_task_nice "surfaceflinger" "-20"
change_task_nice "servicemanager" "-6"
change_task_nice "kswapd" "-2"
change_task_nice "oom_reaper" "-2"

# SCHEDTUNE SETTINGS 
#BACKGROUND
ctl $ST_BACK/schedtune.boost 0
ctl $ST_BACK/schedtune.colocate 0
ctl $ST_BACK/schedtune.prefer_idle 0
ctl $ST_BACK/schedtune.sched_boost_enabled 0
ctl $ST_BACK/schedtune.sched_boost_no_override 0

#FOREGROUND
ctl $ST_FORE/schedtune.boost 5
ctl $ST_FORE/schedtune.colocate 0
ctl $ST_FORE/schedtune.prefer_idle 1
ctl $ST_FORE/schedtune.sched_boost_enabled 0
ctl $ST_FORE/schedtune.sched_boost_no_override 0

#RT
ctl $ST_RT/schedtune.boost 5
ctl $ST_RT/schedtune.colocate 0
ctl $ST_RT/schedtune.prefer_idle 1
ctl $ST_RT/schedtune.sched_boost_enabled 0
ctl $ST_RT/schedtune.sched_boost_no_override 0

#GLOBAL
ctl $ST_GLOBAL/schedtune.boost 0
ctl $ST_GLOBAL/schedtune.colocate 0
ctl $ST_GLOBAL/schedtune.prefer_idle 0
ctl $ST_GLOBAL/schedtune.sched_boost_enabled 0
ctl $ST_GLOBAL/schedtune.sched_boost_no_override 0

# Reserve 90% IO bandwith for foreground tasks
ctl /dev/blkio/blkio.weight 1000
ctl /dev/blkio/blkio.leaf_weight 1000
ctl /dev/blkio/background/blkio.weight 100
ctl /dev/blkio/background/blkio.leaf_weight 100
ctl $LPM/lpm_prediction Y
ctl $LPM/sleep_disabled N
ctl $LPM/bias_hyst 50

# reduce bufferfloat
for i in $(find /sys/class/net -type l); do
  ctl $i/tx_queue_len 512
done

# TCP Congestion Control
for tcp in /proc/sys/net/ipv4/
do
tcp="$(cat "${tcp}tcp_available_congestion_control")"
for sched in bbr bbr2 cubic westwood reno
do
if [[ "$tcp" == *"$sched"* ]]
then
ctl $NET/ipv4/tcp_congestion_control $sched
break
fi
done

# Enable select acknowledgments
ctl $NET/ipv4/tcp_sack 1

# Increase the tcp-time-wait buckets pool size to prevent simple DOS attacks 
ctl $NET/ipv4/tcp_tw_reuse 1

# Turn on window scaling which can enlarge the transfer window:
ctl $NET/ipv4/tcp_window_scaling 1

# Do not cache metrics on closing connections 
ctl $NET/ipv4/tcp_no_metrics_save 1

# Disable SYN cookies
ctl $NET/ipv4/tcp_syncookies 0

# Enable Explicit Congestion Control
ctl $NET/ipv4/tcp_ecn 1

# Enable fast socket open for receiver and sender
ctl $NET/ipv4/tcp_fastopen 3

# Prefer latency
ctl $NET/ipv4/tcp_low_latency 1
done

# Disable KSM to save CPU cycles
if [ -e '/sys/kernel/mm/uksm/run' ]; then
kmsg "DISABLING uKSM"
ctl '/sys/kernel/mm/uksm/run' 0;
setprop ro.config.uksm.support false;
elif [ -e '/sys/kernel/mm/ksm/run' ]; then
kmsg "DISABLING KSM"
ctl '/sys/kernel/mm/ksm/run' 0;
setprop ro.config.ksm.support false;
fi;
if [ -e '/sys/kernel/fp_boost/enabled' ]; then
ctl '/sys/kernel/fp_boost/enabled' 1;
kmsg "ENABLING FINGER PRINT BOOST"
fi;

# =========
# GPU Tweaks
# =========
if [ -e "/sys/module/adreno_idler" ]; then

	kmsg "ENABLING GPU ADRENO IDLER " 
	ctl /sys/module/adreno_idler/parameters/adreno_idler_active "Y"
	ctl /sys/module/adreno_idler/parameters/adreno_idler_idleworkload "6000"
	ctl /sys/module/adreno_idler/parameters/adreno_idler_downdifferential '15'
	ctl /sys/module/adreno_idler/parameters/adreno_idler_idlewait '15'
	
fi

###############################
# Basic tool functions
###############################

# $1:value $2:file path
lock_val() 
{
    if [ -f "$2" ]; then
        chmod 0666 "$2" 2> /dev/null
        echo "$1" > "$2"
        chmod 0444 "$2" 2> /dev/null
    fi
}

# $1:value $2:file path
mutate() 
{
    if [ -f "$2" ]; then
        chmod 0666 "$2" 2> /dev/null
        echo "$1" > "$2"
    fi
}

# $1:value $2:list
has_val_in_list()
{
    for item in $2; do
        if [ "$1" == "$item" ]; then
            echo "true"
            return
        fi
    done
    echo "false"
}

###############################
# PATHs
###############################

FSCC_NAME="fscache-ctrl"

###############################
# Abbreviations
###############################

SYS_FRAME="/system/framework"
SYS_LIB="/system/lib64"
VDR_LIB="/vendor/lib64"
DALVIK="/data/dalvik-cache"
APEX1="/apex/com.android.art/javalib"
APEX2="/apex/com.android.runtime/javalib"

###############################
# FSCC tool functions
###############################

fscc_file_list=""

# $1:apk_path $return:oat_path
fscc_path_apk_to_oat()
{
    # OPSystemUI/OPSystemUI.apk -> OPSystemUI/oat
    echo "${1%/*}/oat"
}

# $1:file/dir
fscc_list_append()
{
    fscc_file_list="$fscc_file_list $1"
}

# $1:file/dir
fscc_add_obj()
{
    # whether file or dir exists
    if [ -e "$1" ]; then
        fscc_list_append "$1"
    fi
}

# $1:package_name
fscc_add_apk()
{
    if [ "$1" != "" ]; then
        # pm path -> "package:/system/product/priv-app/OPSystemUI/OPSystemUI.apk"
        fscc_add_obj "$(pm path "$1" | head -n 1 | cut -d: -f2)"
    fi
}

# $1:package_name
fscc_add_dex()
{
    local package_apk_path
    local apk_name

    if [ "$1" != "" ]; then
        # pm path -> "package:/system/product/priv-app/OPSystemUI/OPSystemUI.apk"
        package_apk_path="$(pm path "$1" | head -n 1 | cut -d: -f2)"
        # user app: OPSystemUI/OPSystemUI.apk -> OPSystemUI/oat
        fscc_add_obj "${package_apk_path%/*}/oat"

        # remove apk name suffix
        apk_name="${package_apk_path%/*}"
        # remove path prefix
        apk_name="${apk_name##*/}"
        # system app: get dex & vdex
        # /data/dalvik-cache/arm64/system@product@priv-app@OPSystemUI@OPSystemUI.apk@classes.dex
        for dex in $(find "$DALVIK" | grep "@$apk_name@"); do
            fscc_add_obj "$dex"
        done
   fi
}

fscc_add_app_home()
{
    # well, not working on Android 7.1
    local intent_act="android.intent.action.MAIN"
    local intent_cat="android.intent.category.HOME"
    local pkg_name
    # "  packageName=com.microsoft.launcher"
    pkg_name="$(pm resolve-activity -a "$intent_act" -c "$intent_cat" | grep packageName | head -n 1 | cut -d= -f2)"
    # /data/dalvik-cache/arm64/system@priv-app@OPLauncher2@OPLauncher2.apk@classes.dex 16M/31M  53.2%
    # /data/dalvik-cache/arm64/system@priv-app@OPLauncher2@OPLauncher2.apk@classes.vdex 120K/120K  100%
    # /system/priv-app/OPLauncher2/OPLauncher2.apk 14M/30M  46.1%
    fscc_add_apk "$pkg_name"
    fscc_add_dex "$pkg_name"
}

fscc_add_app_ime()
{
    local pkg_name
    # "      packageName=com.baidu.input_yijia"
    pkg_name="$(ime list | grep packageName | head -n 1 | cut -d= -f2)"
    # /data/dalvik-cache/arm/system@app@baidushurufa@baidushurufa.apk@classes.dex 5M/17M  33.1%
    # /data/dalvik-cache/arm/system@app@baidushurufa@baidushurufa.apk@classes.vdex 2M/7M  28.1%
    # /system/app/baidushurufa/baidushurufa.apk 1M/28M  5.71%
    # pin apk file in memory is not valuable
    fscc_add_dex "$pkg_name"
}

# $1:package_name
fscc_add_apex_lib()
{
    fscc_add_obj "$(find /apex -name "$1" | head -n 1)"
}

# after appending fscc_file_list
fscc_start()
{
    # multiple parameters, cannot be warped by ""
    "$MODPATH/system/bin/fscache-ctrl" -fdlb0 $fscc_file_list
}

fscc_stop()
{
    killall "$FSCC_NAME"
}

# similiar to PinnerService, Mlock(Unevictable) 200~350MB
fscc_add_obj "$SYS_FRAME/framework.jar"
fscc_add_obj "$SYS_FRAME/services.jar"
fscc_add_obj "$SYS_FRAME/ext.jar"
fscc_add_obj "$SYS_FRAME/telephony-common.jar"
fscc_add_obj "$SYS_FRAME/qcnvitems.jar"
fscc_add_obj "$SYS_FRAME/oat"
fscc_add_obj "$SYS_FRAME/arm64"
fscc_add_obj "$SYS_FRAME/arm/boot-framework.oat"
fscc_add_obj "$SYS_FRAME/arm/boot-framework.vdex"
fscc_add_obj "$SYS_FRAME/arm/boot.oat"
fscc_add_obj "$SYS_FRAME/arm/boot.vdex"
fscc_add_obj "$SYS_FRAME/arm/boot-core-libart.oat"
fscc_add_obj "$SYS_FRAME/arm/boot-core-libart.vdex"
fscc_add_obj "$SYS_LIB/libandroid_servers.so"
fscc_add_obj "$SYS_LIB/libandroid_runtime.so"
fscc_add_obj "$SYS_LIB/libandroidfw.so"
fscc_add_obj "$SYS_LIB/libandroid.so"
fscc_add_obj "$SYS_LIB/libhwui.so"
fscc_add_obj "$SYS_LIB/libjpeg.so"
fscc_add_obj "$VDR_LIB/libssc.so"
fscc_add_obj "$VDR_LIB/libgsl.so"
fscc_add_obj "$VDR_LIB/sensors.ssc.so"
fscc_add_apex_lib "core-oj.jar"
fscc_add_apex_lib "core-libart.jar"
fscc_add_apex_lib "updatable-media.jar"
fscc_add_apex_lib "okhttp.jar"
fscc_add_apex_lib "bouncycastle.jar"

fscc_stop
fscc_start
##############################
# PATHs
###############################

SFA_REL="$BIN_DIR"
SFA_NAME="injector"
SFA_LIB="libsfanalysis.so"

###############################
# SfAnalysis tool functions
###############################

sfa_start()
{
    # raise inotify limit
    lock_val "131072" /proc/sys/fs/inotify/max_queued_events
    lock_val "131072" /proc/sys/fs/inotify/max_user_watches
    lock_val "1024" /proc/sys/fs/inotify/max_user_instances

    local lib_path
    if [ "$(is_aarch64)" == "true" ]; then
        lib_path="/system/lib64/$SFA_LIB"
    else
        lib_path="/system/lib/$SFA_LIB"
    fi

    # fallback to standlone mode
    [ ! -f "$lib_path" ] && lib_path="$MODULE_PATH/$lib_path"
    
    "$MODPATH/bin/$SFA_NAME" "/system/bin/surfaceflinger" "$lib_path" 

    # injection failed. Retry after setting SELinux to permissive
    if [ "$?" != "0" ]; then
        #setenforce 0
        "$MODPATH/bin/$SFA_NAME" "/system/bin/surfaceflinger" "$lib_path" 
    fi
}

sfa_start

boot_run_once=false
spectrum_mode=$(getprop persist.spectrum.profile)
setprop persist.spectrum.profile 0
(
while true
do
    sleep 15
    if $boot_run_once
    then
        [ "$(getprop persist.spectrum.profile)" == "$spectrum_mode" ] && continue
        rm $LOG
    else
        boot_run_once=true
    fi
    spectrum_mode=$(getprop persist.spectrum.profile)
    case "$spectrum_mode" in
       # Lazy Profile
        "0") {
kmsg "-------------------
	LAZY MODE STARTING ~
	------------------------"
#GPU Tunables
ctl /sys/class/kgsl/kgsl-3d0/devfreq/polling_interval 10
ctl /sys/class/kgsl/kgsl-3d0/idle_timer 72
ctl /sys/class/kgsl/kgsl-3d0/force_clk_on 0
ctl /sys/class/kgsl/kgsl-3d0/thermal_pwrlevel 3
ctl /sys/class/kgsl/kgsl-3d0/force_bus_on 0
ctl /sys/class/kgsl/kgsl-3d0/force_no_nap 0
ctl /sys/class/kgsl/kgsl-3d0/devfreq/adrenoboost 2
ctl /sys/class/kgsl/kgsl-3d0/force_rail_on 0
ctl /sys/class/kgsl/kgsl-3d0/bus_split 1

for queue in /sys/block/*/queue/
do
	# Choose the first governor available
	avail_scheds=`cat "${queue}scheduler"`
	for sched in cfq noop kyber bfq mq-deadline none
	do
		if [[ "$avail_scheds" == *"$sched"* ]]
		then
			ctl "${queue}scheduler" "$sched"
			break
		fi
	done
	# Disable I/O statistics accounting
	ctl "${queue}iostats" 0
	
	# Do not use I/O as a source of randomness
	ctl "${queue}add_random" 0
	
	# limit nr request for latency
	ctl "${queue}nr_requests" 64
	
	# Reduce read ahead for less overheads
	ctl "${queue}read_ahead_kb" 128
	
done

	ctl "$BOOST/input_boost_freq" 0:1600000
	ctl "$BOOST/input_boost_ms" 132
	ctl "$BOOST/sched_boost_on_input" 1
	
	for _ in $(seq 2)
	do

	# Migrate tasks down at this much load
	ctl $KERNEL/sched_downmigrate "30 60"
	ctl $KERNEL/sched_group_downmigrate 100
	ctl $KERNEL/sched_downmigrate_boosted 30
	
	# Migrate tasks up at this much load
	ctl $KERNEL/sched_upmigrate "80 90"
	ctl $KERNEL/sched_group_upmigrate 120
	ctl $KERNEL/sched_upmigrate_boosted 25
	done
	

	for EAS in /sys/devices/system/cpu/cpu*/cpufreq/
	do
	avail_govs=`cat "${EAS}scaling_available_governors"`
	if [[ "$avail_govs" == *"schedutil"* ]]
	then
		_ctl "${EAS}scaling_governor" schedutil
		ctl "${EAS}schedutil/up_rate_limit_us" 2500
		ctl "${EAS}schedutil/down_rate_limit_us" 10000
		ctl "${EAS}schedutil/rate_limit_us" 10000
		ctl "${EAS}schedutil/hispeed_load" 90
		ctl "${EAS}schedutil/hispeed_freq" `cat "${EAS}cpuinfo_max_freq"`
		ctl "${EAS}schedutil/pl" 1
	elif [[ "$avail_govs" == *"interactive"* ]]
	then
		_ctl "${EAS}scaling_governor" interactive
		ctl "${EAS}interactive/min_sample_time" 10000
		ctl "${EAS}interactive/go_hispeed_load" 90
		ctl "${EAS}interactive/hispeed_freq" `cat "${EAS}cpuinfo_max_freq"`
	fi
	done
	
	ctl $VM/vfs_cache_pressure 50
	ctl $VM/dirty_background_ratio 10
	ctl $VM/dirty_ratio 30
	ctl $VM/dirty_expire_centisecs 500
	ctl $VM/dirty_writeback_centisecs 0
	ctl $VM/extfrag_threshold 750
	ctl $VM/laptop_mode 0
	ctl $VM/drop_caches 1
	
	# Pwrlvl of Adreno GPU (0 is max and 6 is less active)
	ctl /sys/class/kgsl/kgsl-3d0/max_pwrlevel 0
	ctl /sys/class/kgsl/kgsl-3d0/default_pwrlevel 3
	
	#TOP-APP
	ctl $ST_TOP/schedtune.boost 5
	ctl $ST_TOP/schedtune.colocate 0
	ctl $ST_TOP/schedtune.prefer_idle 1
	ctl $ST_TOP/schedtune.sched_boost_enabled 1
	ctl $ST_TOP/schedtune.sched_boost_no_override 1
	
	Second=$((($RAM*3/100)*1024/4))
	Hidden=$((($RAM*5/100)*1024/4))
	content=$((($RAM*7/100)*1024/4))
	empty=$((($RAM*11/100)*1024/4))
	
	ctl $LMK/minfree "4096,5120,$Second,$Hidden,$content,$empty"
	kmsg "-------------------
	LAZY MODE ACTIVATED ~
	------------------------"
	# Sucess Message
	kmsg $(date) 
	kmsg "LAZY HAS EXECUTED TASK SUCCESSFULLY. ENJOY!"
	vibrate_cmode
	};;
# Performance Profile
        "1") {  	
  kmsg "-------------------
	PERFORMANCE MODE STARTING ~
	------------------------"
#GPU Tunables     	
ctl /sys/class/kgsl/kgsl-3d0/devfreq/polling_interval 36
ctl /sys/class/kgsl/kgsl-3d0/idle_timer 72
ctl /sys/class/kgsl/kgsl-3d0/force_clk_on 0
ctl /sys/class/kgsl/kgsl-3d0/thermal_pwrlevel 3
ctl /sys/class/kgsl/kgsl-3d0/force_bus_on 0
ctl /sys/class/kgsl/kgsl-3d0/force_no_nap 0
ctl /sys/class/kgsl/kgsl-3d0/devfreq/adrenoboost 2
ctl /sys/class/kgsl/kgsl-3d0/force_rail_on 0
ctl /sys/class/kgsl/kgsl-3d0/bus_split 1

for queue in /sys/block/*/queue/
do
	# Choose the first governor available
	avail_scheds=`cat "${queue}scheduler"`
	for sched in cfq noop kyber bfq mq-deadline none
	do
		if [[ "$avail_scheds" == *"$sched"* ]]
		then
			ctl "${queue}scheduler" "$sched"
			break
		fi
	done
	# Disable I/O statistics accounting
	ctl "${queue}iostats" 0
	
	# Do not use I/O as a source of randomness
	ctl "${queue}add_random" 0
	
	# limit nr request for latency
	ctl "${queue}nr_requests" 64
	
	# Reduce read ahead for less overheads
	ctl "${queue}read_ahead_kb" 16
	
done

	ctl "$BOOST/input_boost_freq" 0:1400000
	ctl "$BOOST/input_boost_ms" 40
	ctl "$BOOST/sched_boost_on_input" 1
	
	for _ in $(seq 2)
	do

	# Migrate tasks down at this much load
	ctl $KERNEL/sched_downmigrate "60 60"
	ctl $KERNEL/sched_group_downmigrate 60
	ctl $KERNEL/sched_downmigrate_boosted 25
	
	# Migrate tasks up at this much load
	ctl $KERNEL/sched_upmigrate "80 80"
	ctl $KERNEL/sched_group_upmigrate 80
	ctl $KERNEL/sched_upmigrate_boosted 25
	done
	
	for EAS in /sys/devices/system/cpu/cpu*/cpufreq/
	do
	avail_govs=`cat "${EAS}scaling_available_governors"`
	if [[ "$avail_govs" == *"schedutil"* ]]
	then
		_ctl "${EAS}scaling_governor" schedutil
		ctl "${EAS}schedutil/up_rate_limit_us" 5000
		ctl "${EAS}schedutil/down_rate_limit_us" 5000
		ctl "${EAS}schedutil/rate_limit_us" 5000
		ctl "${EAS}schedutil/hispeed_load" 80
		ctl "${EAS}schedutil/hispeed_freq" `cat "${EAS}cpuinfo_max_freq"`
		ctl "${EAS}schedutil/pl" 0
	elif [[ "$avail_govs" == *"interactive"* ]]
	then
		_ctl "${EAS}scaling_governor" interactive
		ctl "${EAS}interactive/min_sample_time" 5000
		ctl "${EAS}interactive/go_hispeed_load" 80
		ctl "${EAS}interactive/hispeed_freq" `cat "${EAS}cpuinfo_max_freq"`
	fi
	done
	
	ctl $VM/vfs_cache_pressure 50
	ctl $VM/dirty_background_ratio 10
	ctl $VM/dirty_ratio 90
	ctl $VM/dirty_expire_centisecs 0
	ctl $VM/dirty_writeback_centisecs 0
	ctl $VM/extfrag_threshold 600
	ctl $VM/laptop_mode 0
	ctl $VM/drop_caches 1
	
	# Pwrlvl of Adreno GPU (0 is max and 6 is less active)
	ctl /sys/class/kgsl/kgsl-3d0/max_pwrlevel 0
	ctl /sys/class/kgsl/kgsl-3d0/default_pwrlevel 5
	
	#TOP-APP
	ctl $ST_TOP/schedtune.boost 0
	ctl $ST_TOP/schedtune.colocate 0
	ctl $ST_TOP/schedtune.prefer_idle 0
	ctl $ST_TOP/schedtune.sched_boost_enabled 0
	ctl $ST_TOP/schedtune.sched_boost_no_override 0
	Second=$((($RAM*3/100)*1024/4))
	Hidden=$((($RAM*4/100)*1024/4))
	content=$((($RAM*7/100)*1024/4))
	empty=$((($RAM*11/100)*1024/4))
	
	ctl $LMK/minfree "4096,5120,$Second,$Hidden,$content,$empty"
	kmsg "-------------------
	PERFORMANCE/MULTITASKING MODE ACTIVATED ~
	------------------------"
	# Sucess Message
	kmsg $(date) 
	kmsg "LAZY HAS EXECUTED TASK SUCCESSFULLY. ENJOY!"
	vibrate_cmode
	};;
	# Battery Profile
        "2") {
kmsg "-------------------
	BATTERY MODE STARTING ~
	------------------------"
#GPU Tunables     	
ctl /sys/class/kgsl/kgsl-3d0/devfreq/polling_interval 36
ctl /sys/class/kgsl/kgsl-3d0/idle_timer 72
ctl /sys/class/kgsl/kgsl-3d0/force_clk_on 0
ctl /sys/class/kgsl/kgsl-3d0/thermal_pwrlevel 3
ctl /sys/class/kgsl/kgsl-3d0/force_bus_on 0
ctl /sys/class/kgsl/kgsl-3d0/force_no_nap 0
ctl /sys/class/kgsl/kgsl-3d0/devfreq/adrenoboost 2
ctl /sys/class/kgsl/kgsl-3d0/force_rail_on 0
ctl /sys/class/kgsl/kgsl-3d0/bus_split 1

for queue in /sys/block/*/queue/
do
	# Choose the first governor available
	avail_scheds=`cat "${queue}scheduler"`
	for sched in cfq noop kyber bfq mq-deadline none
	do
		if [[ "$avail_scheds" == *"$sched"* ]]
		then
			ctl "${queue}scheduler" "$sched"
			break
		fi
	done
	# Disable I/O statistics accounting
	ctl "${queue}iostats" 0
	
	# Do not use I/O as a source of randomness
	ctl "${queue}add_random" 0
	
	# limit nr request for latency
	ctl "${queue}nr_requests" 64
	
	# Reduce read ahead for less overheads
	ctl "${queue}read_ahead_kb" 16
	
	done

	ctl "$BOOST/input_boost_freq" 0:0
	ctl "$BOOST/input_boost_ms" 0
	ctl "$BOOST/sched_boost_on_input" 1
	
	for _ in $(seq 2)
	do

	# Migrate tasks down at this much load
	ctl $KERNEL/sched_downmigrate "100 100"
	ctl $KERNEL/sched_group_downmigrate 100
	ctl $KERNEL/sched_downmigrate_boosted 100
	
	# Migrate tasks up at this much load
	ctl $KERNEL/sched_upmigrate "100 100"
	ctl $KERNEL/sched_group_upmigrate 100
	ctl $KERNEL/sched_upmigrate_boosted 100
	done
	
	for EAS in /sys/devices/system/cpu/cpu*/cpufreq/
	do
	avail_govs=`cat "${EAS}scaling_available_governors"`
	if [[ "$avail_govs" == *"schedutil"* ]]
	then
		_ctl "${EAS}scaling_governor" schedutil
		ctl "${EAS}schedutil/up_rate_limit_us" 2500
		ctl "${EAS}schedutil/down_rate_limit_us" 10000
		ctl "${EAS}schedutil/rate_limit_us" 10000
		ctl "${EAS}schedutil/hispeed_load" 99
		ctl "${EAS}schedutil/hispeed_freq" `cat "${EAS}cpuinfo_max_freq"`
		ctl "${EAS}schedutil/pl" 0
	elif [[ "$avail_govs" == *"interactive"* ]]
	then
		_ctl "${EAS}scaling_governor" interactive
		ctl "${EAS}interactive/min_sample_time" 10000
		ctl "${EAS}interactive/go_hispeed_load" 99
		ctl "${EAS}interactive/hispeed_freq" `cat "${EAS}cpuinfo_max_freq"`
	fi
	done
	
	ctl $VM/vfs_cache_pressure 50
	ctl $VM/dirty_background_ratio 10
	ctl $VM/dirty_ratio 30
	ctl $VM/dirty_expire_centisecs 3000
	ctl $VM/dirty_writeback_centisecs 3000
	ctl $VM/extfrag_threshold 500
	ctl $VM/laptop_mode 0
	ctl $VM/drop_caches 2
	
	# Pwrlvl of Adreno GPU (0 is max and 6 is less active)
	ctl /sys/class/kgsl/kgsl-3d0/max_pwrlevel 5
	ctl /sys/class/kgsl/kgsl-3d0/default_pwrlevel 5
	
	#TOP-APP
	ctl $ST_TOP/schedtune.boost 0
	ctl $ST_TOP/schedtune.colocate 0
	ctl $ST_TOP/schedtune.prefer_idle 0
	ctl $ST_TOP/schedtune.sched_boost_enabled 0
	ctl $ST_TOP/schedtune.sched_boost_no_override 0
	
	Second=$((($RAM*3/100)*1024/4))
	Hidden=$((($RAM*4/100)*1024/4))
	content=$((($RAM*7/100)*1024/4))
	empty=$((($RAM*11/100)*1024/4))
	
	ctl $LMK/minfree "4096,5120,$Second,$Hidden,$content,$empty"
	kmsg "-------------------
	BATTERY MODE ACTIVATED ~
	------------------------"
	# Sucess Message
	kmsg $(date) 
	kmsg "LAZY HAS EXECUTED TASK SUCCESSFULLY. ENJOY!"
	vibrate_cmode
	};;
# Gaming Profile
        "3") {
#GPU Tunables
kmsg "-------------------
	GAMING MODE STARTING ~
	------------------------"
ctl /sys/class/kgsl/kgsl-3d0/devfreq/polling_interval 36
ctl /sys/class/kgsl/kgsl-3d0/idle_timer 1000000
ctl /sys/class/kgsl/kgsl-3d0/force_clk_on 1
ctl /sys/class/kgsl/kgsl-3d0/thermal_pwrlevel 0
ctl /sys/class/kgsl/kgsl-3d0/force_bus_on 1
ctl /sys/class/kgsl/kgsl-3d0/force_no_nap 1
ctl /sys/class/kgsl/kgsl-3d0/devfreq/adrenoboost 2
ctl /sys/class/kgsl/kgsl-3d0/force_rail_on 1
ctl /sys/class/kgsl/kgsl-3d0/bus_split 0


for queue in /sys/block/*/queue/
do
	# Choose the first governor available
	avail_scheds=`cat "${queue}scheduler"`
	for sched in cfq noop kyber bfq mq-deadline none
	do
		if [[ "$avail_scheds" == *"$sched"* ]]
		then
			ctl "${queue}scheduler" "$sched"
			break
		fi
	done
	# Disable I/O statistics accounting
	ctl "${queue}iostats" 0
	
	# Do not use I/O as a source of randomness
	ctl "${queue}add_random" 0
	
	# limit nr request for latency
	ctl "${queue}nr_requests" 256
	
	# Reduce read ahead for less overheads
	ctl "${queue}read_ahead_kb" 768
	
done

	ctl "$BOOST/input_boost_freq" 0:1600000
	ctl "$BOOST/input_boost_ms" 250
	ctl "$BOOST/sched_boost_on_input" 1
	
	for _ in $(seq 2)
	do

	# Migrate tasks down at this much load
	ctl $KERNEL/sched_downmigrate "30 60"
	ctl $KERNEL/sched_group_downmigrate 60
	ctl $KERNEL/sched_downmigrate_boosted 30
	
	# Migrate tasks up at this much load
	ctl $KERNEL/sched_upmigrate "70 80"
	ctl $KERNEL/sched_group_upmigrate 70
	ctl $KERNEL/sched_upmigrate_boosted 25 
	done
	
	for EAS in /sys/devices/system/cpu/cpu*/cpufreq/
	do
	avail_govs=`cat "${EAS}scaling_available_governors"`
	if [[ "$avail_govs" == *"schedutil"* ]]
	then
		_ctl "${EAS}scaling_governor" schedutil
		ctl "${EAS}schedutil/up_rate_limit_us" 500
		ctl "${EAS}schedutil/down_rate_limit_us" 2000
		ctl "${EAS}schedutil/rate_limit_us" 2000
		ctl "${EAS}schedutil/hispeed_load" 80
		ctl "${EAS}schedutil/hispeed_freq" `cat "${EAS}cpuinfo_max_freq"`
		ctl "${EAS}schedutil/pl" 1
	elif [[ "$avail_govs" == *"interactive"* ]]
	then
		_ctl "${EAS}scaling_governor" interactive
		ctl "${EAS}interactive/min_sample_time" 2000
		ctl "${EAS}interactive/go_hispeed_load" 80
		ctl "${EAS}interactive/hispeed_freq" `cat "${EAS}cpuinfo_max_freq"`
	fi
	done
	
	ctl $VM/vfs_cache_pressure 10
	ctl $VM/dirty_background_ratio 3
	ctl $VM/dirty_ratio 10
	ctl $VM/dirty_expire_centisecs 0
	ctl $VM/dirty_writeback_centisecs 0
	ctl $VM/extfrag_threshold 500
	ctl $VM/laptop_mode 0
	ctl $VM/drop_caches 3
	
	# Pwrlvl of Adreno GPU (0 is max and 6 is less active)
	ctl /sys/class/kgsl/kgsl-3d0/max_pwrlevel 0
	ctl /sys/class/kgsl/kgsl-3d0/default_pwrlevel 0
	
	#TOP-APP
	ctl $ST_TOP/schedtune.boost 5
	ctl $ST_TOP/schedtune.colocate 0
	ctl $ST_TOP/schedtune.prefer_idle 1
	ctl $ST_TOP/schedtune.sched_boost_enabled 1
	ctl $ST_TOP/schedtune.sched_boost_no_override 1
	
	Second=$((($RAM*3/100)*1024/4))
	Hidden=$((($RAM*4/100)*1024/4))
	content=$((($RAM*8/100)*1024/4))
	empty=$((($RAM*15/100)*1024/4))
	
	ctl $LMK/minfree "4096,5120,$Second,$Hidden,$content,$empty"
	kmsg "-------------------
	GAMING MODE ACTIVATED ~
	------------------------"
	# Sucess Message
	kmsg $(date) 
	kmsg "LAZY HAS EXECUTED TASK SUCCESSFULLY. ENJOY!"
	vibrate_cmode
};;
esac
done
) &